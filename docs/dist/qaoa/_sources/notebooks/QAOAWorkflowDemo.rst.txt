
An example workflow of the QAOA package
=======================================

This notebook walks through a simple example workflow, and is intended
as a quick introduction to the functionalities of the package. More
elaborate examples are provided in other notebooks.

.. code:: ipython3

    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.optimize import minimize
    
    # import the neccesary pyquil modules
    from pyquil.api import local_qvm, WavefunctionSimulator
    from pyquil.paulis import PauliSum, PauliTerm
    from pyquil.unitary_tools import lifted_pauli
    
    # import the QAOAParameters that we want to demo
    from entropica_qaoa.qaoa.parameters import (AbstractParams, StandardParams, ExtendedParams,
                                             QAOAParameterIterator)
    
    # import VQE and cost function modules
    from entropica_qaoa.qaoa.cost_function import QAOACostFunctionOnQVM, QAOACostFunctionOnWFSim

Set up the problem hyperparameters
----------------------------------

We start by setting up the Hamiltonian encoding the cost function we
wish to minimise, as well as the timesteps to run QAOA. We do so by
first using the ``AbstractParams`` class, however we could just as
easily set up any specific parametrisation directly – see the notebook
``QAOAParameterDemo.ipynb`` for more details.

.. code:: ipython3

    hamiltonian = []
    hamiltonian.append(PauliTerm("Z", 0, 0.7)*PauliTerm("Z", 1))
    hamiltonian.append(PauliTerm("Z", 0, 1.2)*PauliTerm("Z", 2))
    hamiltonian.append(PauliTerm("Z", 0, -0.5))
    hamiltonian = PauliSum(hamiltonian)
    print("hamiltonian =", hamiltonian)
    
    timesteps = 2
    abstract_params = AbstractParams([hamiltonian,timesteps])
    print(abstract_params)


.. parsed-literal::

    hamiltonian = (0.7+0j)*Z0*Z1 + (1.2+0j)*Z0*Z2 + (-0.5+0j)*Z0
    Hyperparameters:
    	register: [0, 1, 2]
    	qubits_singles: [0]
    	single_qubit_coeffs: [-0.5]
    	qubits_pairs: [[0, 1], [0, 2]]
    	pair_qubit_coeffs: [0.7 1.2]
    	n_steps: 2
    


Specfify the variable parameters and create corresponding ``QAOAParameters`` object
-----------------------------------------------------------------------------------

Here we will set up ``StandardParameters`` - this corresponds to the
parametrisation of the original QAOA paper by Farhi et al, where the
mixer and cost Hamiltonian each have one angle per timestep (giving a
total of 2p parameters to optimise over).

.. code:: ipython3

    # Specify some angles
    betas = [0.1, 0.6]
    gammas = [0.4, 0.5]
    parameters = (betas, gammas)
    
    standard_params = StandardParams.from_AbstractParameters(abstract_params, parameters)
    print(standard_params)


.. parsed-literal::

    Hyperparameters:
    	register: [0, 1, 2]
    	qubits_singles: [0]
    	qubits_pairs: [[0, 1], [0, 2]]
    Parameters:
    	betas: [0.1 0.6]
    	gammas: [0.4 0.5]
    


Set up the cost function and running the optimiser
--------------------------------------------------

For simplicity here, we will work on the wavefunction simulator, which
requires opening the QVM and Quil Compiler. Open two separate terminal
windows, typing ``qvm -S`` in one, and ``quilc -S`` in the other. If you
have installed the Forest SDK, the Quantum Virtual Machine will start in
the background. More information on installing and running the QVM can
be found in Rigetti’s `Forest
documentation <http://docs.rigetti.com/en/stable/start.html>`__.

.. code:: ipython3

    # Set up the WavefunctionSimulator object
    sim = WavefunctionSimulator()

We now create the ``cost_function`` object, with all the necessary
inputs. In the notebook ``VQEDemo.ipynb`` we give more detail and
illustration of the uasge of the ``scalar_cost_function``, ``noisy`` and
``enable_logging`` features; in this notebook, we will not make use of
them.

.. code:: ipython3

    # set up the cost function
    cost_function = QAOACostFunctionOnWFSim(hamiltonian,
                                            params=standard_params,
                                            sim=sim,
                                            scalar_cost_function=True, # See VQEDemo.ipynb for more details
                                            nshots=1,                  # irrelevant, if noisy=False
                                            noisy=False,               # See VQEDemo.ipynb for more details
                                            enable_logging=False)
    
    # and optimize the parameters
    res = minimize(cost_function, standard_params.raw(), tol=1e-3,
                          options={"maxiter": 500})
    res




.. parsed-literal::

          fun: -1.7154095396254412
     hess_inv: array([[ 0.0830568 ,  0.03328284, -0.01703522,  0.00809966],
           [ 0.03328284,  0.07835203, -0.01554634,  0.00493801],
           [-0.01703522, -0.01554634,  0.10263509,  0.02494807],
           [ 0.00809966,  0.00493801,  0.02494807,  0.1303328 ]])
          jac: array([-1.07899308e-04,  2.46793032e-04,  1.92970037e-05, -3.48538160e-05])
      message: 'Optimization terminated successfully.'
         nfev: 126
          nit: 16
         njev: 21
       status: 0
      success: True
            x: array([0.4952357 , 0.26456877, 0.42861577, 0.78512534])



We can check this against the value we should get, by finding the lowest
eigenvalue of ``hamiltonian``.

.. code:: ipython3

    ham_matrix = lifted_pauli(hamiltonian,hamiltonian.get_qubits())
    eigs = np.linalg.eigvals(ham_matrix)
    min(eigs)




.. parsed-literal::

    (-2.4+0j)



Clearly we have not found the ground state energy. We can try increasing
the number of timesteps:

.. code:: ipython3

    betas          = [0.1, 0.6, 0.8]
    gammas_singles = [0.4, 0.5, 0.6]
    gammas_pairs   = [0.1, 0.3, 0.5]
    parameters = (betas, gammas_singles, gammas_pairs)
    
    standard_params_p3 = StandardParams([hamiltonian,3],parameters)

.. code:: ipython3

    sim = WavefunctionSimulator()
    
    cost_function = QAOACostFunctionOnWFSim(hamiltonian,
                                            params=standard_params_p3,
                                            sim=sim,
                                            scalar_cost_function=True,
                                            nshots=10,
                                            noisy=False)
    
    res = minimize(cost_function, standard_params_p3.raw(), tol=1e-3,
                          options={"maxiter": 500})
    res




.. parsed-literal::

          fun: -1.9556233482561467
     hess_inv: array([[ 0.0831613 ,  0.04448419,  0.03471919, -0.0170294 , -0.0080001 ,
            -0.00480396],
           [ 0.04448419,  0.09979178,  0.05655973, -0.00272076,  0.00327948,
            -0.01337178],
           [ 0.03471919,  0.05655973,  0.09356553,  0.00548783,  0.00431584,
            -0.00112389],
           [-0.0170294 , -0.00272076,  0.00548783,  0.19939433,  0.13690652,
             0.08379491],
           [-0.0080001 ,  0.00327948,  0.00431584,  0.13690652,  0.17252557,
             0.07257511],
           [-0.00480396, -0.01337178, -0.00112389,  0.08379491,  0.07257511,
             0.16000797]])
          jac: array([ 2.63422728e-04,  1.73509121e-04, -1.90749764e-04,  2.13459134e-04,
           -1.99094415e-04,  8.55326653e-05])
      message: 'Optimization terminated successfully.'
         nfev: 328
          nit: 30
         njev: 41
       status: 0
      success: True
            x: array([0.64276829, 0.43356982, 0.24545528, 0.39828893, 0.75863776,
           0.81549836])



This is better, but still not the actual ground state. Since we don’t
seem to be doing very well with ``StandardParams``, let’s try the
``ExtendedParams`` parametrisation instead.

.. code:: ipython3

    extended_params_p3 = ExtendedParams.linear_ramp_from_hamiltonian(hamiltonian, n_steps=3)
    
    cost_function = QAOACostFunctionOnWFSim(hamiltonian,
                                            params=extended_params_p3,
                                            sim=sim,
                                            scalar_cost_function=True,
                                            nshots=1,
                                            noisy=False)
    
    res = minimize(cost_function, extended_params_p3.raw(), tol=1e-3,
                          options={"maxiter": 500})
    res




.. parsed-literal::

          fun: -2.399999915959698
     hess_inv: array([[ 5.05787978e-01,  5.72094158e-03, -1.82635731e-01,
            -1.20663368e-01, -3.21693552e-03,  9.07614331e-02,
            -2.06461797e-02,  4.85457045e-02, -4.54641730e-04,
             1.21534068e-01, -6.84552975e-05, -2.74013653e-02,
             2.13407661e-02, -8.14576104e-03,  3.17570006e-02,
             1.83793401e-02, -4.04760896e-02, -1.58318517e-02],
           [ 5.72094158e-03,  1.00832660e+00, -2.45431480e-02,
            -1.70039434e-02,  3.90925846e-02,  2.71892266e-02,
            -5.28373936e-03,  7.37284072e-02,  1.29413788e-02,
             1.50813924e-01,  1.42653600e-02, -6.46662090e-03,
             2.74021318e-02,  5.39331318e-03,  2.13728922e-02,
            -4.56587897e-03,  1.33986321e-02,  2.18125746e-03],
           [-1.82635731e-01, -2.45431480e-02,  9.44819430e-01,
             1.13539323e-01, -3.88848506e-02,  8.48333807e-03,
             8.65188718e-03, -3.52237541e-02,  5.21093506e-02,
            -1.41150605e-01, -2.61385239e-02, -1.56595358e-04,
            -5.79821021e-02,  2.50874080e-02, -1.48936513e-02,
             6.76421434e-02, -7.34246266e-02, -4.66787278e-02],
           [-1.20663368e-01, -1.70039434e-02,  1.13539323e-01,
             3.12683239e-01, -2.19617023e-02, -1.45898396e-01,
             4.93400546e-02, -4.00922123e-02,  4.51709740e-03,
            -3.02292081e-01, -7.74594722e-03,  1.28901994e-02,
            -3.85202936e-03,  8.60768999e-03, -1.75034433e-03,
            -2.66748059e-02,  2.32324628e-02,  8.06031860e-04],
           [-3.21693552e-03,  3.90925846e-02, -3.88848506e-02,
            -2.19617023e-02,  8.19522106e-01,  5.07234162e-03,
             2.52186875e-02, -2.40034091e-01, -1.59428667e-02,
             4.59134579e-02,  1.56799625e-02, -1.57125022e-02,
             1.94035283e-02,  4.48913410e-03,  3.95565353e-02,
             4.46598112e-02,  1.66514222e-01, -1.49243096e-02],
           [ 9.07614331e-02,  2.71892266e-02,  8.48333807e-03,
            -1.45898396e-01,  5.07234162e-03,  8.65412413e-01,
             8.55129429e-02,  3.50600076e-02,  2.67044166e-03,
             3.67774717e-01,  5.77250012e-02, -1.39475424e-02,
             2.36024669e-03, -1.42690154e-01, -4.50578507e-03,
             2.69166317e-02,  4.54515470e-02,  3.11204524e-01],
           [-2.06461797e-02, -5.28373936e-03,  8.65188718e-03,
             4.93400546e-02,  2.52186875e-02,  8.55129429e-02,
             1.23403359e-01, -2.40087051e-02, -1.09469827e-02,
            -4.92612548e-02, -2.93135025e-02,  1.25829763e-02,
             4.77496490e-03, -5.37656808e-03, -2.98305258e-02,
             1.29303666e-02,  3.94382653e-02,  3.10220050e-02],
           [ 4.85457045e-02,  7.37284072e-02, -3.52237541e-02,
            -4.00922123e-02, -2.40034091e-01,  3.50600076e-02,
            -2.40087051e-02,  4.60667496e-01, -3.71258699e-02,
             4.72363023e-02,  3.41380337e-02, -2.24182994e-02,
             5.21429295e-03, -1.45708851e-02, -2.15598340e-01,
             3.34745314e-02,  3.72894008e-02,  4.54775583e-04],
           [-4.54641730e-04,  1.29413788e-02,  5.21093506e-02,
             4.51709740e-03, -1.59428667e-02,  2.67044166e-03,
            -1.09469827e-02, -3.71258699e-02,  6.49645804e-01,
             1.38032844e-01,  1.86229450e-02,  8.64772711e-03,
            -2.58037844e-02, -3.28390526e-02, -6.03136758e-02,
            -4.47931352e-01,  1.54746863e-02,  1.15604719e-01],
           [ 1.21534068e-01,  1.50813924e-01, -1.41150605e-01,
            -3.02292081e-01,  4.59134579e-02,  3.67774717e-01,
            -4.92612548e-02,  4.72363023e-02,  1.38032844e-01,
             2.41211922e+00,  2.00187906e-01, -6.75408231e-02,
            -2.90681225e-02, -3.41584008e-02, -1.25288261e-01,
            -1.06236405e-01,  1.43904748e-01,  1.39055496e-01],
           [-6.84552975e-05,  1.42653600e-02, -2.61385239e-02,
            -7.74594722e-03,  1.56799625e-02,  5.77250012e-02,
            -2.93135025e-02,  3.41380337e-02,  1.86229450e-02,
             2.00187906e-01,  1.02379887e+00, -8.04974144e-03,
            -2.63418714e-03,  1.31263387e-02, -8.15870558e-03,
            -2.32069622e-02,  1.22585167e-02,  1.32636069e-02],
           [-2.74013653e-02, -6.46662090e-03, -1.56595358e-04,
             1.28901994e-02, -1.57125022e-02, -1.39475424e-02,
             1.25829763e-02, -2.24182994e-02,  8.64772711e-03,
            -6.75408231e-02, -8.04974144e-03,  1.00146402e+00,
            -1.23582052e-02, -1.59906102e-02, -2.78978655e-03,
             1.89690819e-02, -1.31602638e-02, -1.27354294e-02],
           [ 2.13407661e-02,  2.74021318e-02, -5.79821021e-02,
            -3.85202936e-03,  1.94035283e-02,  2.36024669e-03,
             4.77496490e-03,  5.21429295e-03, -2.58037844e-02,
            -2.90681225e-02, -2.63418714e-03, -1.23582052e-02,
             4.50316735e-01, -8.88470904e-03, -1.17252839e-02,
             5.02731230e-02,  1.08710373e-02, -2.14893711e-02],
           [-8.14576104e-03,  5.39331318e-03,  2.50874080e-02,
             8.60768999e-03,  4.48913410e-03, -1.42690154e-01,
            -5.37656808e-03, -1.45708851e-02, -3.28390526e-02,
            -3.41584008e-02,  1.31263387e-02, -1.59906102e-02,
            -8.88470904e-03,  1.19828466e-01,  2.76689842e-02,
             4.46391761e-02, -3.42679945e-02, -4.96725985e-02],
           [ 3.17570006e-02,  2.13728922e-02, -1.48936513e-02,
            -1.75034433e-03,  3.95565353e-02, -4.50578507e-03,
            -2.98305258e-02, -2.15598340e-01, -6.03136758e-02,
            -1.25288261e-01, -8.15870558e-03, -2.78978655e-03,
            -1.17252839e-02,  2.76689842e-02,  7.16000208e-01,
             3.09731823e-04, -2.31210548e-01,  1.08145230e-02],
           [ 1.83793401e-02, -4.56587897e-03,  6.76421434e-02,
            -2.66748059e-02,  4.46598112e-02,  2.69166317e-02,
             1.29303666e-02,  3.34745314e-02, -4.47931352e-01,
            -1.06236405e-01, -2.32069622e-02,  1.89690819e-02,
             5.02731230e-02,  4.46391761e-02,  3.09731823e-04,
             4.54236584e-01,  1.63348537e-02, -1.22181603e-01],
           [-4.04760896e-02,  1.33986321e-02, -7.34246266e-02,
             2.32324628e-02,  1.66514222e-01,  4.54515470e-02,
             3.94382653e-02,  3.72894008e-02,  1.54746863e-02,
             1.43904748e-01,  1.22585167e-02, -1.31602638e-02,
             1.08710373e-02, -3.42679945e-02, -2.31210548e-01,
             1.63348537e-02,  7.16236427e-01,  6.43187490e-04],
           [-1.58318517e-02,  2.18125746e-03, -4.66787278e-02,
             8.06031860e-04, -1.49243096e-02,  3.11204524e-01,
             3.10220050e-02,  4.54775583e-04,  1.15604719e-01,
             1.39055496e-01,  1.32636069e-02, -1.27354294e-02,
            -2.14893711e-02, -4.96725985e-02,  1.08145230e-02,
            -1.22181603e-01,  6.43187490e-04,  3.22788838e-01]])
          jac: array([-2.39074230e-04,  2.98023224e-08,  2.98023224e-08,  4.21822071e-04,
            2.48551369e-05,  4.64618206e-05, -1.63674355e-04,  9.72151756e-05,
            1.60336494e-04,  1.37090683e-05,  5.96046448e-08, -1.19209290e-07,
           -9.99867916e-05, -3.83883715e-04,  7.99894333e-05,  1.65075064e-04,
            4.63426113e-05, -8.51750374e-05])
      message: 'Optimization terminated successfully.'
         nfev: 420
          nit: 15
         njev: 21
       status: 0
      success: True
            x: array([ 7.85150721e-01,  5.78113676e-01,  5.60062559e-01,  2.08726814e-04,
            3.51731556e-01,  6.75368797e-01,  2.38622521e-05,  5.81870585e-01,
            5.79186798e-01,  1.57066498e+00,  5.55242783e-01,  5.43684195e-01,
           -1.92060188e-05, -3.33305894e-05,  4.70546077e-01,  1.76387089e-01,
            7.41111075e-01,  6.13634390e-01])



Clearly now we have found a much better ground state energy. The result
attribute ``x`` is a list of the optimal circuit parameters that have
been found. We can disentangle this into the ``betas`` and ``gammas`` of
our QAOA parameterisation by using the ``update_from_raw()`` method:

.. code:: ipython3

    extended_params_p3.update_from_raw(res['x'])
    extended_params_p3




.. parsed-literal::

    Hyperparameters:
    	register: [0, 1, 2]
    	qubits_singles: [0]
    	qubits_pairs: [[0, 1], [0, 2]]
    Parameters:
    	betas: [[7.85150721e-01 5.78113676e-01 5.60062559e-01], [2.08726814e-04 3.51731556e-01 6.75368797e-01], [2.38622521e-05 5.81870585e-01 5.79186798e-01]]
    	gammas_singles: [[1.57066498], [0.55524278], [0.54368419]]
    	gammas_pairs: [[-1.92060188e-05 -3.33305894e-05], [ 4.70546077e-01  1.76387089e-01], [ 7.41111075e-01  6.13634390e-01]]



Now that we have the optimal angles, we can prepare the corresponding
state and sample from it to obtain the most probable bitstring.

In this notebook we are using the wavefunction simulator, which allows
us to ‘cheat’ and easily obtain any observable quantity without the need
to sample. We use the ``get_wavefunction`` method of the
``cost_function`` to obtain the wavefunction, then compute the
corresponding probabilities, and plot a bar graph of the outcomes:

.. code:: ipython3

    opt_wfn = cost_function.get_wavefunction(res.x)
    print(opt_wfn)


.. parsed-literal::

    (2.9e-09+1.6e-08j)|000> + (0.0001096507+4.95906e-05j)|001> + (-1.38802e-05-3.4404e-05j)|010> + (-9.73087e-05-6.87168e-05j)|011> + (2.80349e-05-3.29471e-05j)|100> + (-7.92943e-05-2.18049e-05j)|101> + (-0.9977813633-0.0665756036j)|110> + (-3.39352e-05+1.48205e-05j)|111>


.. code:: ipython3

    probs = opt_wfn.probabilities()
    probs




.. parsed-literal::

    array([2.62839948e-16, 1.44824897e-08, 1.37629776e-09, 1.41909770e-08,
           1.87146411e-09, 6.76304199e-09, 9.99999960e-01, 1.37124116e-09])



.. code:: ipython3

    labels = ["{0:03b}".format(i) for i in range(8)]
    plt.bar(range(8),probs)
    plt.xticks(range(8), labels)
    plt.show()



.. image:: QAOAWorkflowDemo_files/QAOAWorkflowDemo_23_0.png


The QAOA has determined that the bitstring 110 (6 in decimal) is the
minimum energy solution with essentially unit probability. Let’s check
this is consistent with the real answer:

.. code:: ipython3

    np.linalg.eig(ham_matrix)




.. parsed-literal::

    (array([ 1.4+0.j, -1.4+0.j,  0. +0.j,  0. +0.j, -1. +0.j,  1. +0.j,
            -2.4+0.j,  2.4+0.j]),
     array([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
            [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
            [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
            [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
            [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
            [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],
            [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],
            [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]]))



The lowest energy solution does indeed correspond to the eigenvector
:math:`(0,0,0,0,0,0,1,0)`, i.e. the :math:`|110\rangle` component.
Suppose that we return to the original Hamiltonian, but instead we
remove the single-qubit bias term on qubit 0. Let’s run the computation
again and see what result we find.

.. code:: ipython3

    term1 = PauliTerm("Z", 0, 0.7) * PauliTerm("Z", 1)
    term2 = PauliTerm("Z", 0, 1.2) * PauliTerm("Z", 2)
    
    hamiltonian_unbiased = PauliSum([term1, term2])
    n_steps = 2
    
    params_unbiased = ExtendedParams.linear_ramp_from_hamiltonian(hamiltonian_unbiased,n_steps)
    
    cost_function_unbiased = QAOACostFunctionOnWFSim(hamiltonian_unbiased,
                                            params=params_unbiased,
                                            sim=sim,
                                            nshots=1,
                                            noisy=False)
    
    res_unbiased = minimize(cost_function_unbiased, params_unbiased.raw(), tol=1e-3, options={"maxiter":500})
    
    opt_wfn_unbiased = cost_function_unbiased.get_wavefunction(res_unbiased.x)
    probs_unbiased = opt_wfn_unbiased.probabilities()
    
    labels = ["{0:03b}".format(i) for i in range(8)]
    plt.bar(range(8),probs_unbiased)
    plt.xticks(range(8), labels)
    plt.show()



.. image:: QAOAWorkflowDemo_files/QAOAWorkflowDemo_27_0.png


Now the probabilities are completely symmetric under a bit flip on all
qubits - there is no bias term in the Hamiltonian to force a given qubit
into state :math:`|0\rangle` or :math:`|1\rangle`, and the eigenspectrum
of the cost function Hamiltonian is “doubly degenerate”, i.e. the energy
eigenstates fall into pairs, where the corresponding eigenstates are
related to one another by a bit flip on all qubits.
