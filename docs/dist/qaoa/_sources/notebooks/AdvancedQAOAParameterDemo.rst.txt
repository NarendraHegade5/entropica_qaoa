
Additional QAOA parameter classes
=================================

Here we illustrate the use of the ``Annealing`` and ``Fourier``
parameter classes included in the ``entropica_qaoa`` package.

.. code:: ipython3

    # import the standard modules from python
    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.optimize import minimize
    
    # import the neccesary pyquil modules
    from pyquil.api import local_qvm, WavefunctionSimulator
    from pyquil.paulis import PauliSum, PauliTerm
    from pyquil.unitary_tools import lifted_pauli
    
    # import the QAOAParameters classes 
    from entropica_qaoa.qaoa.parameters import AbstractParams, AnnealingParams, StandardParams, FourierParams
    from entropica_qaoa.qaoa.cost_function import QAOACostFunctionOnWFSim
    from entropica_qaoa.utilities import *
    
    # turn off matplotlib warnings associated with networkx
    import warnings
    warnings.filterwarnings("ignore")
    
    # Set up the WavefunctionSimulator object
    sim = WavefunctionSimulator()

The ``Annealing`` parameter class
---------------------------------

In quantum annealing, we start in the ground state of a *mixer* (or
*reference*) Hamiltonian :math:`H_M`, and gradually transform to the
ground state of a *cost* Hamiltonian :math:`H_C`, according to some
annealing schedule function :math:`s(t)`, where :math:`t` denotes time.
If it were possible to perform the transformation infintessimally
slowly, we would be guaranteed to arrive at the exact ground state of
the cost Hamiltonian. In practice, the transformation is performed over
some finite time, and we hope to prepare the ground state of :math:`H_C`
with some acceptably high probability.

At any time :math:`t` during the procedure, the instantaneous
Hamiltonian is given by

:raw-latex:`\begin{equation}
H(t) = \left(1 - s(t)\right)H_M + s(t)H_C
\end{equation}`

where :math:`s(0) = 0`, and :math:`s(t = T) = 1`, and :math:`T` is the
total annealing time. We see that the strengths with which :math:`H_M`
and :math:`H_C` act at a given time are related: the mixer is applied
with a weight :math:`(1 - s(t))`, and the cost Hamiltonian with weight
:math:`s(t)`. It is common to view the QAOA as a form of discretised
annealing, where the procedure is performed in a fixed number of steps
:math:`p`. However, the coefficients of the mixer and cost Hamiltonians
need not be related in the simple way that they are in a conventional
annealing schedule.

The ``AnnealingParams`` parameter class illustrates what is perhaps the
first conceptual step from annealing, towards the more conventionally
used parametrisations of QAOA. Using ``AnnealingParams``, we prepare an
output quantum state with a circuit described by the unitary operator

:raw-latex:`\begin{equation}
U = \exp\left(-i(1-s(t_p)) H_M \Delta t\right)\exp\left(-i s(t_p) H_C \Delta t\right) \cdots \exp\left(-i(1-s(t_1))H_M \Delta t\right) \exp\left(-i s(t_1) H_C \Delta t\right)
\end{equation}`

Here, we have a fixed temporal step of size :math:`\Delta t`, and we
need to specify what the values of the annealing schedule function
should be at the different timesteps. That is, we need to provide a list
of the values of :math:`s(t_i`) for :math:`i = 1,..,p`.

Here we illustrate the use of the ``AnnealingParams`` class, whose value
we envisage primarily as a didactic or research tool. Specifically,
let’s compare the annealing parametrisation with the ``StandardParams``
parametrisation.

First, we set up the Hamiltonian as usual.

.. code:: ipython3

    # Create a hamiltonian on 3 qubits with 2 coupling terms and 1 bias term
    Term1 = PauliTerm("Z", 0, 0.7)*PauliTerm("Z", 1)
    Term2 = PauliTerm("Z", 0, 1.2)*PauliTerm("Z", 2)
    Term3 = PauliTerm("Z", 0, -0.5)
    
    hamiltonian = PauliSum([Term1,Term2,Term3])
    print("hamiltonian =", hamiltonian)


.. parsed-literal::

    hamiltonian = (0.7+0j)*Z0*Z1 + (1.2+0j)*Z0*Z2 + (-0.5+0j)*Z0


We’ll use the ``linear_ramp_from_hamiltonian`` method to determine the
values of the function :math:`s` at the different timesteps.

.. code:: ipython3

    p = 10
    linear_annealing_params = AnnealingParams.linear_ramp_from_hamiltonian(hamiltonian, p)
    print(linear_annealing_params)


.. parsed-literal::

    Parameters:
    	schedule: [0.05 0.15 0.25 0.35 0.45 0.55 0.65 0.75 0.85 0.95]


Now let’s optimise the cost function and examine the corresponing output
parameters.

.. code:: ipython3

    # set up the cost function
    cost_anneal = QAOACostFunctionOnWFSim(hamiltonian,
                                            params=linear_annealing_params,
                                            sim=sim,
                                            scalar_cost_function=True, 
                                            nshots=1)
    
    # and optimize the parameters
    res_anneal = minimize(cost_anneal, linear_annealing_params.raw())
    
    print("expectation value = ", res_anneal.fun)
    
    linear_annealing_params.update_from_raw(res_anneal.x)
    linear_annealing_params.plot()


.. parsed-literal::

    expectation value =  -2.3430994192572356



.. image:: AdvancedQAOAParameterDemo_files/AdvancedQAOAParameterDemo_7_1.png


Now let’s solve the same problem using ``StandardParams``.

.. code:: ipython3

    standard_params = StandardParams.linear_ramp_from_hamiltonian(hamiltonian,p)
    
    cost_standard = QAOACostFunctionOnWFSim(hamiltonian,
                                            params=standard_params,
                                            sim=sim,
                                            scalar_cost_function=True,
                                            nshots=1)
    
    res_std = minimize(cost_standard, standard_params.raw())
    
    print("expectation value = ", res_std.fun)
    standard_params.update_from_raw(res_std.x)
    standard_params.plot()


.. parsed-literal::

    expectation value =  -2.399999999994928



.. image:: AdvancedQAOAParameterDemo_files/AdvancedQAOAParameterDemo_9_1.png


Notice that at least for this simple problem, the expectation values
obtained are comparable, yet we use half the number of parameters in
``AnnealingParams`` as ``StandardParams``.

In the optimal ``StandardParams``, we see a rather erratic but generally
downward (upward) trend in the betas (gammas), which is conistent with
the annealing picture that the mixer Hamiltonian is gradually turned
off, and the cost Hamiltonian is gradually turned on.

Following `Ref 1 <#references>`__, we can attempt to make a connection
between the two parametrisations, by interpreting the sum of all the
betas and all the gammas as a total annealing time. The corresponding
annealing schedule function value at each time can then be defined as

:raw-latex:`\begin{equation}
s(t_i) = \frac{\gamma_i}{\beta_i + \gamma_i}
\end{equation}`

When we plot this function, we see a similar behaviour to that observed
above.

GIVE A SENTENCE OR SO EXPLAINING WHY THEY ARE NOT THE SAME, OR WHERE THE
CORRESPONDENCE BREAKS DOWN, ETC.

.. code:: ipython3

    opt_betas = standard_params.betas
    opt_gammas = standard_params.gammas
    hybrid_params = [opt_gammas[i]/(opt_gammas[i] + opt_betas[i]) for i in range(p)]
    
    plt.plot(range(p),hybrid_params)
    plt.xlabel('Timesteps', fontsize=12)
    plt.ylabel('$s(t_i)$', fontsize=12)
    plt.show()



.. image:: AdvancedQAOAParameterDemo_files/AdvancedQAOAParameterDemo_11_0.png


The ``Fourier`` parameter class
-------------------------------

This parameter class originated from attempts to find heuristic ways of
reducing the number of parameters required to perform QAOA. Based on
empirical observations in patterns of the optimal QAOA angles, Zhuo et
al (see `Ref 1 <#references>`__) proposed considering the discrete
Fourier transforms of ``betas`` and ``gammas`` as an alternative, more
economical parametrisation.

The basic idea kicks off from the conventional QAOA parametrisation,
i.e. what we call the ``StandardParams`` class. Here, at each iteration
in QAOA we have one angle for all of the mixer Hamiltonian terms, and
one angle for all of the cost Hamiltonian terms. That is, the
``StandardParams`` parametrisation requires the specification of
:math:`2p` numbers, a ``beta`` and a ``gamma`` for each timestep.

In the Fourier representation, we switch instead to a set of :math:`2q`
parameters, denoted :math:`\vec{v}` and :math:`\vec{u}`, which are
related to :math:`\vec{\beta}` and :math:`\vec{\gamma}` by

:raw-latex:`\begin{eqnarray}
\beta_i^{(p)} &=& \sum_{k=1}^q v_k \cos\left[ \left(k - \frac{1}{2}\right) \left(i - \frac{1}{2}\right) \frac{\pi}{p} \right]\\
\gamma_i^{(p)} &=& \sum_{k=1}^q u_k \sin\left[ \left(k - \frac{1}{2}\right) \left(i - \frac{1}{2}\right) \frac{\pi}{p} \right]
\end{eqnarray}`

where :math:`i = 1,...,p`. The insight of Zhou et al is that the optimal
parameters found are often empirically seen to be smoothly varying
functions for certain problems, and that it should then be possible to
use a reduced parameter set consisting of only the lowest :math:`q`
frequency components of those functions. Clearly, for :math:`q\geq p` we
have the full expressivity of the original parameter set (i.e. the
:math:`\beta`\ s and :math:`\gamma`\ s). In this parametrisation, for
fixed :math:`q`, the optimisation problem therefore becomes that of
finding the optimal Fourier components :math:`v_k` and :math:`u_k`.

In `Ref 1 <#references>`__, the authors show that certain variants of
this basic Fourier parametrisation can perform significantly better than
a randomised brute force search through parameter space, for MaxCut
problems on 3-regular and 4-regular graphs. Here, we will compare
``FourierParams`` and ``StandardParams`` for different instances of a
relatively small problem.

We will consider 3-regular graphs on 8 nodes, and use the
``linear_ramp_from_hamiltonian`` method to generate intial parameters
for each of the two classes. We generate a random problem instance, and
find the optimial ground state energy returned using the two
parametrisations. We then compute the relative error of each from the
true ground state energy.

First define a convenience function:

.. code:: ipython3

    def randgraph_fourier_std(degree,nodes,p,q):
        
        # Generate a random graph
        graph = random_k_regular_graph(degree,nodes,weighted=True)
        hamiltonian = hamiltonian_from_graph(graph)
        
        # Get ground state energy
        hamiltonian_matrix = lifted_pauli(hamiltonian,hamiltonian.get_qubits())
        ground_energy = min(np.linalg.eigvals(hamiltonian_matrix))
        
        # Define Fourier params and run optimisation
        fourier_params = FourierParams.linear_ramp_from_hamiltonian(hamiltonian,p,q)
        cost_fourier = QAOACostFunctionOnWFSim(hamiltonian,params=fourier_params,sim=sim,nshots=1)
        res_fourier = minimize(cost_fourier, fourier_params.raw())
        
        # Define Standard params and run optimisation
        std_params = StandardParams.linear_ramp_from_hamiltonian(hamiltonian,p)
        cost_std = QAOACostFunctionOnWFSim(hamiltonian,params=std_params,sim=sim,nshots=1)
        res_std = minimize(cost_std, std_params.raw())
        
        return res_fourier, res_std, ground_energy, hamiltonian

We’ll start by setting :math:`p=q`, where in principle the
``FourierParams`` and the ``StandardParams`` have equal expressivity.

.. code:: ipython3

    p = 3
    q = 3
    
    samples = 20 # Note: with samples = 20, this cell should take around 5 minutes to run on a standard laptop.
    
    err_fourier = np.zeros(samples)
    err_std = np.zeros(samples)
    
    for i in range(samples):
        
        res_fourier, res_std, ground_energy, _ = randgraph_fourier_std(3,8,p,q)
    
        # Compute relative error 
        err_fourier[i] = np.absolute((res_fourier.fun - ground_energy)/ground_energy)
        err_std[i] = np.absolute((res_std.fun - ground_energy)/ground_energy)
        
    print("Mean error using FourierParams: ", np.mean(err_fourier))
    print("Mean error using StandardParams: ", np.mean(err_std))


.. parsed-literal::

    Mean error using FourierParams:  0.18192778368805543
    Mean error using StandardParams:  0.18192778368801132


REMOVE THE FOLLOWING TEXT, AND INSTEAD SHOW THE EXAMPLES FROM THE GROUP
MEETING TALK - WITH q=2 and q=1, AND THE ERRORS THERE.

In the naive way we have applied it here, the ``Fourier``
parametrisation appears to perform worse than the ``Standard``
parametrisation. However, let’s check how senstive the optimal
parameters are to random perturbations. We’ll do this by solving a fixed
instance once to obtain the base case optimal parameters,
``opt_fourier_params`` and ``opt_std_params``. We’ll then randomly
modify each of these and solve the problem again, in each case recording
the relative error from the actual ground state energy.

.. code:: ipython3

    res_fourier, res_std, ground_energy, hamiltonian = randgraph_fourier_std(3,8,p,q)
    
    opt_fourier_params = res_fourier.x
    opt_std_params = res_std.x
    
    
    # Template set of Params to get right shape - but can get rid of the need to do this later.
    fourier_template = FourierParams.linear_ramp_from_hamiltonian(hamiltonian,p,q)
    std_template = StandardParams.linear_ramp_from_hamiltonian(hamiltonian,p)
    
    samples = 20
    
    err_perturbed_fourier = np.zeros(samples)
    err_perturbed_std = np.zeros(samples)
    
    for i in range(samples):
        
        perturbed_fourier = opt_fourier_params + np.random.rand(len(opt_fourier_params))
        fourier_template.update_from_raw(perturbed_fourier) 
        cost_fourier = QAOACostFunctionOnWFSim(hamiltonian,params=fourier_template,sim=sim,nshots=1)
        res_fourier = minimize(cost_fourier, fourier_template.raw())
        
        perturbed_std = opt_std_params + np.random.rand(len(opt_std_params))
        std_template.update_from_raw(perturbed_std)
        cost_std = QAOACostFunctionOnWFSim(hamiltonian,params=std_template,sim=sim,nshots=1)
        res_std = minimize(cost_std, std_template.raw())
        
        err_perturbed_fourier[i] = np.absolute((res_fourier.fun - ground_energy)/ground_energy)
        err_perturbed_std[i] = np.absolute((res_std.fun - ground_energy)/ground_energy)
        
    print("Mean error with perturbed FourierParams: ", np.mean(err_perturbed_fourier))
    print("Mean error with perturbed StandardParams: ", np.mean(err_perturbed_std))


::


    ---------------------------------------------------------------------------

    KeyboardInterrupt                         Traceback (most recent call last)

    <ipython-input-9-068c83101f00> in <module>
         24     std_template.update_from_raw(perturbed_std)
         25     cost_std = QAOACostFunctionOnWFSim(hamiltonian,params=std_template,sim=sim,nshots=1)
    ---> 26     res_std = minimize(cost_std, std_template.raw())
         27 
         28     err_perturbed_fourier[i] = np.absolute((res_fourier.fun - ground_energy)/ground_energy)


    ~/.local/lib/python3.7/site-packages/scipy/optimize/_minimize.py in minimize(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)
        592         return _minimize_cg(fun, x0, args, jac, callback, **options)
        593     elif meth == 'bfgs':
    --> 594         return _minimize_bfgs(fun, x0, args, jac, callback, **options)
        595     elif meth == 'newton-cg':
        596         return _minimize_newtoncg(fun, x0, args, jac, hess, hessp, callback,


    ~/.local/lib/python3.7/site-packages/scipy/optimize/optimize.py in _minimize_bfgs(fun, x0, args, jac, callback, gtol, norm, eps, maxiter, disp, return_all, **unknown_options)
       1014             alpha_k, fc, gc, old_fval, old_old_fval, gfkp1 = \
       1015                      _line_search_wolfe12(f, myfprime, xk, pk, gfk,
    -> 1016                                           old_fval, old_old_fval, amin=1e-100, amax=1e100)
       1017         except _LineSearchError:
       1018             # Line search failed to find a better solution.


    ~/.local/lib/python3.7/site-packages/scipy/optimize/optimize.py in _line_search_wolfe12(f, fprime, xk, pk, gfk, old_fval, old_old_fval, **kwargs)
        834     ret = line_search_wolfe1(f, fprime, xk, pk, gfk,
        835                              old_fval, old_old_fval,
    --> 836                              **kwargs)
        837 
        838     if ret[0] is not None and extra_condition is not None:


    ~/.local/lib/python3.7/site-packages/scipy/optimize/linesearch.py in line_search_wolfe1(f, fprime, xk, pk, gfk, old_fval, old_old_fval, args, c1, c2, amax, amin, xtol)
         99     stp, fval, old_fval = scalar_search_wolfe1(
        100             phi, derphi, old_fval, old_old_fval, derphi0,
    --> 101             c1=c1, c2=c2, amax=amax, amin=amin, xtol=xtol)
        102 
        103     return stp, fc[0], gc[0], fval, old_fval, gval[0]


    ~/.local/lib/python3.7/site-packages/scipy/optimize/linesearch.py in scalar_search_wolfe1(phi, derphi, phi0, old_phi0, derphi0, c1, c2, amax, amin, xtol)
        174             alpha1 = stp
        175             phi1 = phi(stp)
    --> 176             derphi1 = derphi(stp)
        177         else:
        178             break


    ~/.local/lib/python3.7/site-packages/scipy/optimize/linesearch.py in derphi(s)
         88 
         89     def derphi(s):
    ---> 90         gval[0] = fprime(xk + s*pk, *newargs)
         91         if gradient:
         92             gc[0] += 1


    ~/.local/lib/python3.7/site-packages/scipy/optimize/optimize.py in function_wrapper(*wrapper_args)
        324     def function_wrapper(*wrapper_args):
        325         ncalls[0] += 1
    --> 326         return function(*(wrapper_args + args))
        327 
        328     return ncalls, function_wrapper


    ~/.local/lib/python3.7/site-packages/scipy/optimize/optimize.py in approx_fprime(xk, f, epsilon, *args)
        754 
        755     """
    --> 756     return _approx_fprime_helper(xk, f, epsilon, args=args)
        757 
        758 


    ~/.local/lib/python3.7/site-packages/scipy/optimize/optimize.py in _approx_fprime_helper(xk, f, epsilon, args, f0)
        694         ei[k] = 1.0
        695         d = epsilon * ei
    --> 696         grad[k] = (f(*((xk + d,) + args)) - f0) / d[k]
        697         ei[k] = 0.0
        698     return grad


    ~/.local/lib/python3.7/site-packages/scipy/optimize/optimize.py in function_wrapper(*wrapper_args)
        324     def function_wrapper(*wrapper_args):
        325         ncalls[0] += 1
    --> 326         return function(*(wrapper_args + args))
        327 
        328     return ncalls, function_wrapper


    ~/anaconda3/lib/python3.7/site-packages/entropica_qaoa/entropica_qaoa/qaoa/cost_function.py in __call__(self, params, nshots)
        280     def __call__(self, params, nshots: int = None):
        281         self.params.update_from_raw(params)
    --> 282         out = super().__call__(self.params, nshots=nshots)
        283 
        284         # remove last entry from the log and replace it with something


    ~/anaconda3/lib/python3.7/site-packages/entropica_qaoa/entropica_qaoa/vqe/cost_function.py in __call__(self, params, nshots)
        237 
        238         memory_map = self.make_memory_map(params)
    --> 239         wf = self.sim.wavefunction(self.prepare_ansatz, memory_map=memory_map)
        240         wf = wf.amplitudes
        241         E = (wf.conj()@self.ham@wf).real


    ~/anaconda3/lib/python3.7/site-packages/pyquil/api/_error_reporting.py in wrapper(*args, **kwargs)
        236             global_error_context.log[key] = pre_entry
        237 
    --> 238         val = func(*args, **kwargs)
        239 
        240         # poke the return value of that call in


    ~/anaconda3/lib/python3.7/site-packages/pyquil/api/_wavefunction_simulator.py in wavefunction(self, quil_program, memory_map)
         80 
         81         return self.connection._wavefunction(quil_program=quil_program,
    ---> 82                                              random_seed=self.random_seed)
         83 
         84     @_record_call


    ~/anaconda3/lib/python3.7/site-packages/pyquil/api/_error_reporting.py in wrapper(*args, **kwargs)
        236             global_error_context.log[key] = pre_entry
        237 
    --> 238         val = func(*args, **kwargs)
        239 
        240         # poke the return value of that call in


    ~/anaconda3/lib/python3.7/site-packages/pyquil/api/_base_connection.py in _wavefunction(self, quil_program, random_seed)
        330 
        331         payload = wavefunction_payload(quil_program, random_seed)
    --> 332         response = post_json(self.session, self.sync_endpoint + "/qvm", payload)
        333         return Wavefunction.from_bit_packed_string(response.content)
        334 


    ~/anaconda3/lib/python3.7/site-packages/pyquil/api/_base_connection.py in post_json(session, url, json)
         54     Post JSON to the Forest endpoint.
         55     """
    ---> 56     res = session.post(url, json=json)
         57     if res.status_code >= 400:
         58         raise parse_error(res)


    ~/.local/lib/python3.7/site-packages/requests/sessions.py in post(self, url, data, json, **kwargs)
        579         """
        580 
    --> 581         return self.request('POST', url, data=data, json=json, **kwargs)
        582 
        583     def put(self, url, data=None, **kwargs):


    ~/.local/lib/python3.7/site-packages/requests/sessions.py in request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)
        531         }
        532         send_kwargs.update(settings)
    --> 533         resp = self.send(prep, **send_kwargs)
        534 
        535         return resp


    ~/.local/lib/python3.7/site-packages/requests/sessions.py in send(self, request, **kwargs)
        684 
        685         if not stream:
    --> 686             r.content
        687 
        688         return r


    ~/.local/lib/python3.7/site-packages/requests/models.py in content(self)
        826                 self._content = None
        827             else:
    --> 828                 self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''
        829 
        830         self._content_consumed = True


    ~/.local/lib/python3.7/site-packages/requests/models.py in generate()
        748             if hasattr(self.raw, 'stream'):
        749                 try:
    --> 750                     for chunk in self.raw.stream(chunk_size, decode_content=True):
        751                         yield chunk
        752                 except ProtocolError as e:


    ~/.local/lib/python3.7/site-packages/urllib3/response.py in stream(self, amt, decode_content)
        529         else:
        530             while not is_fp_closed(self._fp):
    --> 531                 data = self.read(amt=amt, decode_content=decode_content)
        532 
        533                 if data:


    ~/.local/lib/python3.7/site-packages/urllib3/response.py in read(self, amt, decode_content, cache_content)
        477             else:
        478                 cache_content = False
    --> 479                 data = self._fp.read(amt)
        480                 if amt != 0 and not data:  # Platform-specific: Buggy versions of Python.
        481                     # Close the connection when no data is returned


    ~/anaconda3/lib/python3.7/http/client.py in read(self, amt)
        445             # Amount is given, implement using readinto
        446             b = bytearray(amt)
    --> 447             n = self.readinto(b)
        448             return memoryview(b)[:n].tobytes()
        449         else:


    ~/anaconda3/lib/python3.7/http/client.py in readinto(self, b)
        489         # connection, and the user is reading more bytes than will be provided
        490         # (for example, reading in 1k chunks)
    --> 491         n = self.fp.readinto(b)
        492         if not n and b:
        493             # Ideally, we would raise IncompleteRead if the content-length


    ~/anaconda3/lib/python3.7/socket.py in readinto(self, b)
        587         while True:
        588             try:
    --> 589                 return self._sock.recv_into(b)
        590             except timeout:
        591                 self._timeout_occurred = True


    KeyboardInterrupt: 


At least in this simple case, the optimal Fourier parameters seem to be
significantly more robust to perturbations. In fact, if we examine the
individual samples, we see that the Fourier parameters always give the
same error, while the error in the Standard params can vary
considerably:

.. code:: ipython3

    print("Fourier errors: ", err_perturbed_fourier)
    print("")
    print("Standard errors: ", err_perturbed_std)

Given that near-term quantum computers will be noisy, this apparent
robustness of the Fourier parameters may be a desriable characteristic
for QAOA applications, worthy of further investigation.



References
----------

1. L. Zhou et al, `Quantum Approximate Optimization Algorithm:
   Performance, Mechanism, and Implementation on Near-Term
   Devices <https://arxiv.org/abs/1812.01041>`__
