
Demo of functionalities in QAOA Utilities
=========================================

This notebooks walks through some of the key features provided by
``utilities.py``. The methods therein fall into four categories:

-  Methods for creating Hamiltonians and graphs, and converting between
   the two.
-  Methods for converting input datasets to QAOA problem instances,
   which may be used to solve clustering using MaxCut.
-  Methods allowing parameter sweeps to be performed, with a view to
   studying the landscape of the optimisation problem being tackled.
-  Functions that illustrate some known analytical and empirical results
   from literature on QAOA.

.. code:: ipython3

    import numpy as np
    import matplotlib.pyplot as plt
    from typing import Type, Iterable
    
    # import the neccesary pyquil modules
    from pyquil.api import WavefunctionSimulator
    from pyquil.paulis import PauliSum, PauliTerm
    
    # import QAOAParameters classes 
    from entropica_qaoa.qaoa.parameters import StandardParams, AbstractParams, ExtendedParams, QAOAParameterIterator
    
    # import optimiser, cost functions, and utilities
    from entropica_qaoa.vqe.optimizer import scipy_optimizer
    from entropica_qaoa.qaoa.cost_function import QAOACostFunctionOnQVM, QAOACostFunctionOnWFSim
    from entropica_qaoa.utilities import *

Hamiltonians and graphs
-----------------------

In QAOA, a problem instance is defined by its corresponding
*hyperparameters*, which refers to a specification of the total number
of qubits ``nqubits``, and one or both of the following:

1. The single qubits that have a bias term (denoted ``singles``) and the
   corresponding bias coefficients (denoted ``biases``).
2. The pairs of qubits that are coupled (denoted ``pairs``), and the
   corresponding coupling coefficients (denoted ``couplings``).

Equivalently, when viewed as a network graph problem, a QAOA instance is
defined by specifying the total number of vertices or nodes in the
graph, and one or both of the following:

1. The vertices that have a bias term, and the corresponding bias
   coefficients.
2. The pairs of vertices that are connected by an edge, and the
   corresponding edge weight.

If we have a known set of problem hyperparameters, the
``hamiltonian_from_hyperparams`` allows us to easily create the
corresponding Hamiltonian.

.. code:: ipython3

    nqubits = 3
    singles = [1]
    biases = [0.3]
    pairs = [[0,1], [1,2]]
    couplings = [0.4, 0.6]
    
    h0 = hamiltonian_from_hyperparams(nqubits,singles,biases,pairs,couplings)
    print(h0)


.. parsed-literal::

    (0.4+0j)*Z0*Z1 + (0.6+0j)*Z1*Z2 + (0.3+0j)*Z1


The ``random_hamiltonian`` method generates a random Hamiltonian
(problem instance) for a specified number of qubits. It randomly selects
a number of biases and number of couplings, then assigns each of them a
random value between zero and one. For instance, let’s create two
4-qubit Hamiltonians.

.. code:: ipython3

    h1 = random_hamiltonian(4)
    h2 = random_hamiltonian(4)
    print("h1 =",h1)
    print()
    print("h2 =",h2)


.. parsed-literal::

    h1 = (0.9222684369138094+0j)*Z0 + (0.1600027995440717+0j)*Z0*Z1 + (0.9223415465163087+0j)*Z0*Z2 + (0.3447720325520308+0j)*Z0*Z3 + (0.8219256428354806+0j)*Z2*Z3
    
    h2 = (0.3962878426941143+0j)*Z3 + (0.8750219042272739+0j)*Z2 + (0.5609013320184626+0j)*Z0*Z1 + (0.7655905047285048+0j)*Z0*Z2 + (0.8042052556912537+0j)*Z1*Z3


We can create a ``networkx`` graph corresponding to the qubit couplings
in ``h1``\ using the ``graph_from_hamiltonian`` method:

.. code:: ipython3

    g1 = graph_from_hamiltonian(h1)
    plot_graph(g1)


.. parsed-literal::

    /home/ewan/.local/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py:579: MatplotlibDeprecationWarning: 
    The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
      if not cb.iterable(width):
    /home/ewan/.local/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py:585: MatplotlibDeprecationWarning: 
    The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
      and cb.iterable(edge_color) \
    /home/ewan/.local/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py:595: MatplotlibDeprecationWarning: 
    The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
      for c in edge_color]):



.. image:: UtilitiesDemo_files/UtilitiesDemo_8_1.png


Alternatively, we can work backwards, creating a graph first, then the
corresponding Hamiltonian using the ``hamiltonian_from_graph`` method.

Let’s take the graph we have just produced (``g1``) and convert it back
to its corresponding Hamiltonian, which we called ``h1`` above.

.. code:: ipython3

    H1 = hamiltonian_from_graph(g1)
    print('From graph:', H1)
    print('Original:', h1)


.. parsed-literal::

    From graph: (0.9222684369138094+0j)*Z0 + (0.1600027995440717+0j)*Z0*Z1 + (0.9223415465163087+0j)*Z0*Z2 + (0.3447720325520308+0j)*Z0*Z3 + (0.8219256428354806+0j)*Z2*Z3
    Original: (0.9222684369138094+0j)*Z0 + (0.1600027995440717+0j)*Z0*Z1 + (0.9223415465163087+0j)*Z0*Z2 + (0.3447720325520308+0j)*Z0*Z3 + (0.8219256428354806+0j)*Z2*Z3


We can also create a graph directly from hyperparameters, using the
``graph_from_hyperparams`` method.

.. code:: ipython3

    g0 = graph_from_hyperparams(nqubits,singles,biases,pairs,couplings)
    plot_graph(g0)



.. image:: UtilitiesDemo_files/UtilitiesDemo_12_0.png


In recent research on QAOA, there has been interest in the performance
of the algorithm on :math:`k`-regular graphs, i.e. graphs where every
node is connected to exactly :math:`k` other nodes. We can generate such
graphs easily using the ``random_k_regular_graph`` function. For
instance, let’s create a 3-regular graph with 8 nodes:

.. code:: ipython3

    G_3_reg = random_k_regular_graph(3,8,weighted=True)
    plot_graph(G_3_reg)



.. image:: UtilitiesDemo_files/UtilitiesDemo_14_0.png


Hamiltonians and data
---------------------

One prominent application of QAOA is to solve the weighted MaxCut
problem, which may be used as a clustering technique - see, for example,
https://arxiv.org/abs/1712.05771.

The pairwise distance between a given pair of data points in a dataset
is used as the weight on the corresponding graph, and enters the
Hamiltonian as the corresponding coupling coefficient between the
corresponding qubits.

In the following, we demo a typical QAOA MaxCut workflow, using simple
toy data generated by the ``gaussian_2Dclusters`` function.

Simple toy datasets for QAOA MaxCut clustering
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let’s create a data set of two clusters, where the points in each
cluster follow Gaussian statistics.

.. code:: ipython3

    n_clusters = 2 # Number of clusters we want 
    n_points = [3,3] # Number of data points in each cluster
    means = [[0,0], [2,2]] # Cluster means (the [x,y] coordinates of each cluster centre)
    
    # Covariance matrix: we will use the same one for each of the two clusters here,
    # but more generally they could be different
    cov_matrix = [[0.1, 0], [0, 0.1]] 
    cov_matrices = [cov_matrix,cov_matrix]
    
    cluster_data = gaussian_2Dclusters(n_clusters,n_points,means,cov_matrices)
    plot_cluster_data(cluster_data)



.. image:: UtilitiesDemo_files/UtilitiesDemo_18_0.png


Now let’s set up the MaxCut problem. We can compute the pairwise
distances of the points in the dataset using the ``distances_dataset``
function. Here we will use the Euclidean distance, but more generally we
can ask for any distance metric included in Scipy’s ``cdist``
`function <https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html>`__.

.. code:: ipython3

    dists = distances_dataset(cluster_data, metric='euclidean')
    dists




.. parsed-literal::

    array([[0.        , 0.57257508, 0.67061533, 2.50522319, 1.97715288,
            2.18482847],
           [0.57257508, 0.        , 0.27326299, 3.00018779, 2.45330732,
            2.59912378],
           [0.67061533, 0.27326299, 0.        , 2.92438433, 2.36849704,
            2.47200532],
           [2.50522319, 3.00018779, 2.92438433, 0.        , 0.5596806 ,
            0.70007187],
           [1.97715288, 2.45330732, 2.36849704, 0.5596806 , 0.        ,
            0.43380544],
           [2.18482847, 2.59912378, 2.47200532, 0.70007187, 0.43380544,
            0.        ]])



.. code:: ipython3

    hData = hamiltonian_from_distance_matrix(dists)
    print(hData)


.. parsed-literal::

    (0.5725750780697101+0j)*Z0*Z1 + (0.6706153291054836+0j)*Z0*Z2 + (2.505223186551061+0j)*Z0*Z3 + (1.9771528839473258+0j)*Z0*Z4 + (2.1848284721427156+0j)*Z0*Z5 + (0.27326299020375366+0j)*Z1*Z2 + (3.000187785718117+0j)*Z1*Z3 + (2.453307323160609+0j)*Z1*Z4 + (2.59912377851229+0j)*Z1*Z5 + (2.924384334085292+0j)*Z2*Z3 + (2.3684970389490734+0j)*Z2*Z4 + (2.472005322713395+0j)*Z2*Z5 + (0.5596805963746729+0j)*Z3*Z4 + (0.7000718737409076+0j)*Z3*Z5 + (0.43380544138661664+0j)*Z4*Z5


Now that we have the Hamiltonian, we can go ahead and run the QAOA to
check that the points are clustered correctly. We will use the
``ExtendedParams`` class, and three timesteps (p=3). We don’t include
any single-qubit bias terms.

.. code:: ipython3

    n_qubits = 6
    p = 3
    
    # Specify some angles
    betas = np.random.rand(n_qubits,p)
    gammas_singles = []
    gammas_pairs = np.random.rand(len(hData),p)
    parameters = (betas,gammas_singles,gammas_pairs)
    
    extended_params = ExtendedParams([hData,p],parameters)
    print(extended_params)


.. parsed-literal::

    Hyperparameters:
    	register: [0, 1, 2, 3, 4, 5]
    	qubits_singles: []
    	qubits_pairs: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]
    Parameters:
    	betas: [[0.87220121 0.80571117 0.65994649 0.16922787 0.79958895 0.77493087], [0.5898085  0.3935463  0.20464811 0.60659102 0.64735875 0.07476994], [0.55772422 0.19232924 0.48345252 0.24874718 0.71773331 0.3195618 ]]
    	gammas_singles: []
    	gammas_pairs: [[0.68551921 0.55557514 0.06029428 0.30000825 0.02065481 0.51525231,  0.3215706  0.411151   0.91990298 0.8665305  0.72293064 0.32107322,  0.42651594 0.65414782 0.59948886], [0.11790938 0.86614028 0.01729397 0.6038728  0.37120065 0.65691124,  0.9430127  0.2081946  0.69706533 0.01294951 0.6186229  0.77132554,  0.59928805 0.08728804 0.10317453], [0.20466996 0.7451214  0.28094606 0.8533505  0.67664818 0.51351539,  0.96605106 0.66209586 0.7354401  0.01273465 0.14323852 0.31670079,  0.68101979 0.00384769 0.08275003]]
    


.. code:: ipython3

    # NOTE - the optimiser will reach its maximum number of iterations, but for the parameters being used here,
    # the choice maxiter=200 seems to be more than sufficient to get to the optimum with high probability.
    
    sim = WavefunctionSimulator() 
    cost_function = QAOACostFunctionOnWFSim(hData,
                                            params=extended_params,
                                            sim=sim,
                                            scalar_cost_function=False,
                                            nshots=1,
                                            noisy=False)
    
    res = scipy_optimizer(cost_function, extended_params.raw(), epsilon=1e-3,
                          maxiter=200)
    res




.. parsed-literal::

         fun: -7.076643332542458
       maxcv: 0.0
     message: 'Maximum number of function evaluations has been exceeded.'
        nfev: 200
      status: 2
     success: False
           x: array([ 0.7643598 ,  0.84259456,  0.66646051,  0.14298609,  0.97376116,
            0.70550483,  0.78308224,  0.58031354,  1.36710844,  0.5001047 ,
            1.10360698, -0.33328672,  1.61249029,  0.20287409,  0.51835819,
            0.24086935,  0.3724822 ,  0.33274003,  1.73657382,  0.51088963,
            0.01389197,  0.31448391, -0.00423799,  0.4690516 ,  1.29246151,
            0.45650981,  0.93522372,  0.96359397,  0.74613327,  0.43962944,
            0.47472378,  0.79403473,  0.63476777,  0.09786328,  0.71743538,
           -0.19443931,  0.57109883,  0.31681828,  2.00514522,  1.9616219 ,
            0.19996784,  0.63053252, -0.01378413,  0.61969912,  0.72684933,
            0.6380609 ,  0.07933444,  0.08455688,  0.18435634,  0.75614273,
            1.29188196,  0.83164563,  1.64889989,  0.51232383,  0.97771574,
            0.84699064,  0.73889207,  0.014497  ,  0.12353031,  0.48519631,
            0.819198  , -0.21744109,  0.15781878])



.. code:: ipython3

    opt_wfn = cost_function.get_wavefunction(res.x)
    probs = opt_wfn.probabilities()
    plt.bar(range(len(probs)),probs)
    plt.show()



.. image:: UtilitiesDemo_files/UtilitiesDemo_25_0.png


Now get the string corresponding to the optimal solution. The ``argmax``
function will return the first of the two degenerate solutions. As
expected, we find that the first three qubits are in one class, and the
second three qubits in another (this is the way the data was
constructed).

.. code:: ipython3

    optimal_string = np.argmax(probs)
    "{0:06b}".format(optimal_string)




.. parsed-literal::

    '111000'



We can check that the other optimal solution found is the complement
bitstring, i.e. 111000:

.. code:: ipython3

    probs[optimal_string] = 0 # Sets the solution 000111 to have zero probability
    optimal_string_complement = np.argmax(probs)
    "{0:06b}".format(optimal_string_complement)




.. parsed-literal::

    '000111'



Landscape sweeps
----------------

This section shows how to use the ``QAOAParameterIterator`` class, which
allows one to compute the cost function value of parametric
wavefunctions produced by QAOA circuits, where one or two parameters of
interest are varied, and all others are kept fixed. Let’s work again
with a simple 2-qubit problem, in the ``ExtendedParams`` class, with
:math:`p=3` timesteps.

.. code:: ipython3

    h_test = []
    h_test.append(PauliTerm("Z", 0, 0.7)*PauliTerm("Z", 1))
    h_test.append(PauliTerm("Z", 0, -0.5))
    h_test = PauliSum(h_test)

We require 3x2 ``betas`` parameters, 3x1 ``gammas_singles`` and 3x1
``gammas_pairs`` parameters, which we will initialise randomly:

.. code:: ipython3

    betas = np.random.rand(3,2)
    gammas_singles = np.random.rand(3,1)
    gammas_pairs = np.random.rand(3,1)
    parameters = (betas,gammas_singles,gammas_pairs)

.. code:: ipython3

    extendedparams = ExtendedParams([h_test,3],parameters)
    print(extendedparams)


.. parsed-literal::

    Hyperparameters:
    	register: [0, 1]
    	qubits_singles: [0]
    	qubits_pairs: [[0, 1]]
    Parameters:
    	betas: [[0.51584273 0.49223626], [0.06543172 0.04893766], [0.34180373 0.67791304]]
    	gammas_singles: [[0.77214532], [0.65836973], [0.11204044]]
    	gammas_pairs: [[0.31538893], [0.61371641], [0.29701828]]
    


We have a total of 12 parameters; as an example, let’s focus on how the
cost function value changes when we vary the ``beta`` angle on the
second qubit in the second QAOA step (p=2). This is the ``[1][1]`` in
the ``betas`` list. We will vary its range from 0 to :math:`2\pi`.

.. code:: ipython3

    range_ = np.linspace(0,2*np.pi,100)
    param_ = "betas[1][1]"
    iterator = QAOAParameterIterator(extendedparams, param_, range_)

We now want to compute the cost function value with all the different
values of the specified parameter of interest.

.. code:: ipython3

    sim = WavefunctionSimulator() # Define the wavefunction simulator
    
    cost_vals = np.zeros((len(range_,)))
    dev_vals = np.zeros((len(range_,)))
    ind = 0
    for i,p in zip(range(len(range_)),iterator):
        
        cost_function = QAOACostFunctionOnWFSim(h_test,
                                                params=p,
                                                sim=sim,
                                                scalar_cost_function=False,
                                                nshots = 1000,
                                                noisy=False)
        
        
        val,dev = cost_function(p.raw(),nshots=1000)
        cost_vals[i] = val
        dev_vals[i] = dev

Below we plot the energy landscape as a function of the parameter of
interest in the specified range, together with the standard deviation. A
more thorough set of methods for visualising energy landscapes will be
demonstrated in a separate notebook.

.. code:: ipython3

    plt.plot(range_,cost_vals,'b',range_,dev_vals,'r')
    plt.legend(('Energy', 'Standard deviation'),
               loc='lower right')
    plt.show()



.. image:: UtilitiesDemo_files/UtilitiesDemo_40_0.png


Known QAOA results
------------------

MaxCut on the Ring of Disagrees
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Ring of Diasgrees is a 2-regular graph on a given number of nodes
:math:`n`. The ground state has energy :math:`-n` for even :math:`n`,
and :math:`-n+1` for odd :math:`n`.

In the paper that originally introduced the QAOA (`Ref
1 <#references>`__), it was shown that this graph is a simple example of
how the approximation ratio returned by QAOA can be made arbitrarily
close to 1 by increasing the parameter :math:`p`. For the MaxCut
problem, the optimal cost function value returned for a given :math:`n`
and :math:`p` was found to be

:raw-latex:`\begin{equation}
C(n,p) = \left(\frac{2p + 1}{2p + 2}\right)n
\end{equation}`

This result assumes the ``StandardParams`` parameterisation, and that
the graph is unweighted (all edge weights equal to 1). Here we verify
this result using the ``ring_of_disagrees`` function.

.. code:: ipython3

    n_nodes = 8
    h_disagrees = ring_of_disagrees(n_nodes)
    g_disagrees = graph_from_hamiltonian(h_disagrees)
    plot_graph(g_disagrees)



.. image:: UtilitiesDemo_files/UtilitiesDemo_42_0.png


.. code:: ipython3

    p_vals = np.arange(1,5) # p range to consider
    output_val = np.zeros((len(p_vals),))
    
    sim = WavefunctionSimulator() # Define the wavefunction simulator
    
    for i in p_vals:
        
        # Initialise angles
        betas = np.random.rand(i)
        gammas_singles = np.zeros((i,)) # Remove this when issue is fixed
        gammas_pairs = np.random.rand(i)
        parameters = (betas, gammas_singles, gammas_pairs)
        
        # Set up (hyper)parameters
        diasagrees_params = StandardParams([h_disagrees,i],parameters)
        
        # Cost function and optimisation
        cost_function = QAOACostFunctionOnWFSim(h_disagrees,
                                                params=diasagrees_params,
                                                sim=sim,
                                                scalar_cost_function=False,
                                                nshots=1,
                                                noisy=False)
        
        res = scipy_optimizer(cost_function, diasagrees_params.raw(), epsilon=1e-3, maxiter=500,method="BFGS")
        
        output_val[i-1] = res.fun - 0.5*len(h_disagrees) # The second term here comes from the identity part 
                                                         # of the MaxCut operator

Since we have 8 qubits, according to Farhi’s formula we should find the
maximum energy to be :math:`-8*(3/4,5/6,7/8,9/10) = -(6, 6.67, 7, 7.2)`
for :math:`p = (1,2,3,4)`:

.. code:: ipython3

    output_val




.. parsed-literal::

    array([-5.99999999, -6.66666666, -6.99999998, -7.99999999])



The lowest energy state corresponds to the situation where neighbouring
qubits have opposite orientations:

.. code:: ipython3

    wf = cost_function.get_wavefunction(res.x)
    probs = wf.probabilities()
    ind = np.argmax(probs)
    opt_state = "{0:08b}".format(ind)
    print(opt_state)


.. parsed-literal::

    10101010




References
----------

1. E. Farhi et al, `A Quantum Approximate Optimization
   Algorithm <https://arxiv.org/abs/1411.4028>`__

